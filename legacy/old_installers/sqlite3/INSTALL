#!/bin/bash
# $1 is where the user wants to
# install sqlite3

# Load gcc/7.3.1
module load gcc/7.3.1

# The directory sqlite3 is going to be installed under
BASE=$1

# The directory that contains all of sqlite2 dependencies, libraries, etc.
if [ ! -d ${BASE}/sqlite3 ]; then
    mkdir -p ${BASE}/sqlite3
    SQLITE_BASE=${BASE}/sqlite3

else
    mkdir -p ${BASE}/sqlite-3.33
    SQLITE_BASE=${BASE}/sqlite-3.33
fi

# Create a temporary directory that will contain all sources
mkdir -p ${SQLITE_BASE}/tmp
SQLITE_TMP=${SQLITE_BASE}/tmp

# Check if source file is present.
# If not download it from the internet
if [ ! -f ./src/sqlite-autoconf-3330000.tar.gz ]; then
    echo "Downloading source file"
    wget https://sqlite.org/2020/sqlite-autoconf-3330000.tar.gz
    mv sqlite-autoconf-3330000.tar.gz ${SQLITE_TMP}

else
    echo "Copying source file"
    cp ./src/sqlite-autoconf-3330000.tar.gz ${SQLITE_TMP}/sqlite-autoconf-3330000.tar.gz
fi

cd ${SQLITE_TMP}
if [ ! -f sqlite-autoconf-3330000.tar.gz ]; then
    echo "Something went wrong tying to copy the source files"
    echo "Please contact iask@ics.psu.edu for assistance"
    exit

else
    mkdir -p ${SQLITE_TMP}/build
    # Extract source files and store them in build
    echo "Extracting and uncompressing source files"
    tar -xzvf sqlite-autoconf-3330000.tar.gz -C build
fi

# Begin the building of the sources
echo "Building dependencies"
cd build
echo "Building sqlite3"
if [ -d sqlite-autoconf-3330000 ]; then
    cd sqlite-autoconf-3330000
    ./configure --prefix=${SQLITE_BASE}
    make && make install

else
    echo "sqlite3 failed to install"
fi

cd ${SQLITE_BASE}
echo "Testing sqlite3"
if [ -x ./bin/sqlite3 ]; then
    ./bin/sqlite3 --version
    echo "sqlite3 has been successfully installed!"
    echo "You can now use sqlite3!"
    echo -e "\nCleaning up!"
    cd ${BASE}
    rm -rf ${SQLITE_TMP}

else
    echo "sqlite3 failed to install correctly"
    echo "Please contact the i-ASK center at iask@ics.psu.edu for help"
fi

# Set up the sqlite3 file for users to use
echo -e "\nSetting up sqlite3 module file"
cd ${BASE}
mkdir -p modules/sqlite
cd modules/sqlite && touch 3.33.lua

# Add relevant lua code to 3.33.lua
echo "help([[SQLite is a C-language library that implements a small, fast, self-contained, high-reliability, full-featured, SQL database engine. SQLite is the most used database engine in the world. SQLite is built into all mobile phones and most computers and comes bundled inside countless other applications that people use every day.]])" >> 3.33.lua
echo "whatis('Description: SQLite version 3.33')" >> 3.33.lua
echo "whatis('URL: https://sqlite.org/index.html')" >> 3.33.lua

# Set up paths for module
MODULE_PATH="prepend_path(\"PATH\", \"${SQLITE_BASE}/bin\")"
MODULE_CPATH="prepend_path(\"CPATH\", \"${SQLITE_BASE}/include\")"
MODULE_LD_PATH="prepend_path(\"LD_LIBRARY_PATH\", \"${SQLITE_BASE}/lib\")"
MODULE_MAN="prepend_path(\"MANPATH\", \"${SQLITE_BASE}/share/man\")"

echo ${MODULE_PATH} >> 3.33.lua
echo ${MODULE_CPATH} >> 3.33.lua
echo ${MODULE_LD_PATH} >> 3.33.lua
echo ${MODULE_MAN} >> 3.33.lua

cd ${BASE}
echo "Module file has been set up in ${BASE}/modules/sqlite/3.33.lua"
echo -e "\nTo use the sqlite3 module, use the following commands in your terminal:"
echo -e "\nmodule use ${BASE}/modules"
echo "module load sqlite/3.33"
echo -e "\nShould you run into any issues please contact"
echo "the i-ASK center at iask@ics.psu.edu for assistance"
echo -e "\nAll done!"
